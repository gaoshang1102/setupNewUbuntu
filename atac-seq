bedTools.sort<-function(functionstring="~/bedtools2/bin/sortBed",bed1,opt.string="")
{
  #create temp files
  a.file=tempfile()
  out   =tempfile()
  options(scipen =99) # not to use scientific notation when writing out
  
  #write bed formatted dataframes to tempfile
  write.table(bed1,file=a.file,quote=F,sep="\t",col.names=F,row.names=F)
  
  # create the command string and call the command using system()
  command=paste(functionstring,"-i",a.file,opt.string,">",out,sep=" ")
  cat(command,"\n")
  try(system(command))
  
  res=read.table(out,header=F)
  unlink(a.file);unlink(out)
  return(res)
}


bedTools.merge<-function(functionstring="~/bedtools2/bin/mergeBed",bed1,opt.string="")
{
  #create temp files
  a.file=tempfile()
  out   =tempfile()
  options(scipen =99) # not to use scientific notation when writing out
  
  #write bed formatted dataframes to tempfile
  write.table(bed1,file=a.file,quote=F,sep="\t",col.names=F,row.names=F)
  
  # create the command string and call the command using system()
  command=paste(functionstring,"-i",a.file,opt.string,">",out,sep=" ")
  cat(command,"\n")
  try(system(command))
  
  res=read.table(out,header=F)
  unlink(a.file);unlink(out)
  return(res)
}

bedTools.coverage<-function(functionstring="~/bedtools2/bin/coverageBed",bed1,bed2,opt.string="")
{
  #create temp files
  a.file=tempfile()
  b.file=tempfile()
  out   =tempfile()
  options(scipen =99) # not to use scientific notation when writing out
  
  #write bed formatted dataframes to tempfile
  write.table(bed1,file=a.file,quote=F,sep="\t",col.names=F,row.names=F)
  write.table(bed2,file=b.file,quote=F,sep="\t",col.names=F,row.names=F)
  
  # create the command string and call the command using system()
  command=paste(functionstring,"-a",a.file,"-b",b.file,opt.string,">",out,sep=" ")
  cat(command,"\n")
  try(system(command))
  
  res=read.table(out,header=F)
  unlink(a.file);unlink(b.file);unlink(out)
  return(res)
}


args <- commandArgs(trailingOnly = TRUE)
chrname <- paste0("chr", args[1])
chr1_fragment <- read.table(paste0("~/scRNA_seq/",chrname,".bed"), stringsAsFactors = F)
chr1_annotation <- read.table(paste0("~/scRNA_seq/",chrname,"_annotation.bed"), stringsAsFactors = F)
barcodes <- read.table("~/scRNA_seq/all_barcodes.txt", stringsAsFactors = F)$V1
coverage_list <- list()
for(i in 1:length(barcodes)){
  cell_tmp <- chr1_fragment[chr1_fragment$V4 == barcodes[i],]
  coverage_list[[i]] <- bedTools.coverage(bed1 = chr1_annotation, bed2=cell_tmp)$V7
}
saveRDS(coverage_list, file = paste0("~/scRNA_seq/",chrname,"_coverage.rds"))

for(ch in c(3:22, "X", "Y")){
  chrname <- paste0("chr", ch)
  edbx <- filter(EnsDb.Hsapiens.v86, filter = ~ seq_name == ch)
  all_gene_exon <- exonsBy(edbx, by="gene", columns=listColumns(EnsDb.Hsapiens.v86, "exon"), use.names=T)
  chr1_exon_bed <- list()
  for(i in 1:length(all_gene_exon)){
    if(sum(table(strand(all_gene_exon[[i]])) == 0) != 2){
      next
    }else{
      gene_list <- list(data.frame(chr = paste0("chr", seqnames(all_gene_exon[[i]])),
                                   start = start(all_gene_exon[[i]]),
                                   end = end(all_gene_exon[[i]]), strand = strand(all_gene_exon[[i]]),
                                   gene_name = all_gene_exon[[i]]$gene_name))
      chr1_exon_bed <- append(chr1_exon_bed, gene_list)
    }
  }
  chr1_exon_bed_sorted <- list()
  chr1_exon_bed_merged <- list()
  for(i in 1:length(chr1_exon_bed)){
    chr1_exon_bed_sorted[[i]] <- bedTools.sort(bed1 = chr1_exon_bed[[i]])
    chr1_exon_bed_merged[[i]] <- bedTools.merge(bed1 = chr1_exon_bed_sorted[[i]])
  }
  for(i in 1:length(chr1_exon_bed)){
    chr1_exon_bed_merged[[i]]$V4 <- chr1_exon_bed_sorted[[i]]$V4[1]
    chr1_exon_bed_merged[[i]]$V5 <- chr1_exon_bed_sorted[[i]]$V5[1]
  }
  for(i in 1:length(chr1_exon_bed_merged)){
    chr1_exon_bed_merged[[i]]$V6 <- "exon"
  }
  for(i in 1:length(chr1_exon_bed_merged)){
    colnames(chr1_exon_bed_merged[[i]]) <- c("chr", "start", "end", "strand", "gene_name", "annotation")
  }
  
  distance <- vector()
  for(i in 1:length(chr1_exon_bed_merged)){
    distance[i] <- chr1_exon_bed_merged[[i]]$end[nrow(chr1_exon_bed_merged[[i]])] - chr1_exon_bed_merged[[i]]$start[1]
  }
  
  sum(distance>1000000)
  
  chr1_exon_bed_merged <- chr1_exon_bed_merged[-which(distance>1000000)]
  
  chr1_intron_bed <- list()
  for(i in 1:length(chr1_exon_bed_merged)){
    if(nrow(chr1_exon_bed_merged[[i]]) == 1){
      next
    }else{
      df <- data.frame(
        chr = chrname,
        start = chr1_exon_bed_merged[[i]]$end[1:(nrow(chr1_exon_bed_merged[[i]])-1)] + 1,
        end = chr1_exon_bed_merged[[i]]$start[2:nrow(chr1_exon_bed_merged[[i]])] - 1,
        strand = chr1_exon_bed_merged[[i]]$strand[1],
        gene_name = chr1_exon_bed_merged[[i]]$gene_name[1],
        annotation = "intron"
      )
      chr1_intron_bed <- append(chr1_intron_bed, list(df))
    }
  }
  
  chr1_gene_bed <- list()
  for(i in 1:length(chr1_exon_bed_merged)){
    chr1_gene_bed[[i]] <- data.frame(chr = chrname, start = chr1_exon_bed_merged[[i]]$start[1], 
                                     end = chr1_exon_bed_merged[[i]]$end[nrow(chr1_exon_bed_merged[[i]])],
                                     strand = chr1_exon_bed_merged[[i]]$strand[1],
                                     gene_name = chr1_exon_bed_merged[[i]]$gene_name[1],
                                     annotation = "gene_body")
  }
  
  chr1_promoter_bed <- list()
  for(i in 1:length(chr1_gene_bed)){
    if(chr1_gene_bed[[i]]$strand == "+"){
      chr1_promoter_bed[[i]] <- data.frame(chr = chrname, start = chr1_gene_bed[[i]]$start-5000, 
                                           end = chr1_gene_bed[[i]]$start-1,
                                           strand = chr1_gene_bed[[i]]$strand[1],
                                           gene_name = chr1_gene_bed[[i]]$gene_name[1],
                                           annotation = "promoter")
    }else{
      chr1_promoter_bed[[i]] <- data.frame(chr = chrname, start = chr1_gene_bed[[i]]$end+1, 
                                           end = chr1_gene_bed[[i]]$end+5000,
                                           strand = chr1_gene_bed[[i]]$strand[1],
                                           gene_name = chr1_gene_bed[[i]]$gene_name[1],
                                           annotation = "promoter")
    }
  }
  
  chr1_gene_and_promoter_bed <- list()
  for(i in 1:length(chr1_gene_bed)){
    tmp <- c(chr1_promoter_bed[[i]]$start, chr1_promoter_bed[[i]]$end, chr1_gene_bed[[i]]$start, chr1_gene_bed[[i]]$end)
    chr1_gene_and_promoter_bed[[i]] <- data.frame(chr = chrname, start = min(tmp), 
                                                  end = max(tmp),
                                                  strand = chr1_gene_bed[[i]]$strand[1],
                                                  gene_name = chr1_gene_bed[[i]]$gene_name[1],
                                                  annotation = "gene_and_promoter")
  }
  
  chr1_gene_and_promoter_bed_combine <- do.call(rbind, chr1_gene_and_promoter_bed)
  chr1_gene_and_promoter_bed_combine <- bedTools.sort(bed1=chr1_gene_and_promoter_bed_combine)
  
  chr1_intergenic_bed <- data.frame(chr = chrname, start = c(1,chr1_gene_and_promoter_bed_combine$V3+1), 
                                    end = c(chr1_gene_and_promoter_bed_combine$V2-1, 248956422), strand = ".",
                                    gene_name = ".", annotation = "intergenic")
  
  final_chr1_exon <- do.call(rbind, chr1_exon_bed_merged)
  final_chr1_intron <- do.call(rbind, chr1_intron_bed)
  final_chr1_promoter <- do.call(rbind, chr1_promoter_bed)
  final_chr1_intergenic <- chr1_intergenic_bed
  
  chr1_annotation <- rbind(final_chr1_exon, final_chr1_intron, final_chr1_promoter, final_chr1_intergenic)
  chr1_annotation <- chr1_annotation[chr1_annotation$end > chr1_annotation$start, ]
  chr1_annotation <- bedTools.sort(bed1=chr1_annotation)
  write.table(chr1_annotation, paste0("~/scRNA_seq/",chrname,"_annotation.bed"), quote = F, row.names = F, col.names = F, sep = "\t")
}
